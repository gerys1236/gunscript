using System.Collections;
using UnityEngine;

public class gun : MonoBehaviour
{
 

    public float damage = 10f;
    public float range = 100f;
    public float fireRate = 15f;
    public float ImpactForce = 30f;

    public int maxAmmo = 30;
    private int currentAmmo;
    public float reloadTime = 3f;
    private bool isRealoading = false;
    public Camera fpsCamera;
    public ParticleSystem muzzleFlash;
    public GameObject impactEffect;

    private float nextTimeToFire = 0f;

    public Animator animator;
    public Animator recoil;
    void start()
    {
        currentAmmo = maxAmmo;
        
    }

    private void OnEnable()
    {
        isRealoading = false;
        animator.SetBool("reloading 0", false);

    }
    // Update is called once per frame
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.R))
        {

            StartCoroutine(Reload());
            return;

        }
        if (isRealoading)
            return;

        if (currentAmmo < 0)
        {
            StartCoroutine(Reload());
            return;
        }
        if (Input.GetButton("Fire1") && Time.time >= nextTimeToFire)
        

        if (Input.GetButton("Fire1") && Time.time >= nextTimeToFire)
        {
                recoil.SetBool("rcoil 1", true);
                nextTimeToFire = Time.time + 1f / fireRate;
                Shoot();
        }
        if (Input.GetButtonUp("Fire1"))
        {
            recoil.SetBool("rcoil 1", false);
        }
        if (isRealoading == true)
        {
            
            recoil.SetBool("rcoil 1", false);
        }
    IEnumerator Reload ()
    {
        
        isRealoading = true;       
        Debug.Log("Reloading...");

        animator.SetBool("reloading 0", true);

        yield return new WaitForSeconds(reloadTime - .25f);

        animator.SetBool("reloading 0", false);
        yield return new WaitForSeconds(.25f);
        currentAmmo = maxAmmo;
        isRealoading = false;
    }

    void Shoot ()
    {

        currentAmmo--;
        muzzleFlash.Play();
        
        RaycastHit hit;
       if (Physics.Raycast(fpsCamera.transform.position, fpsCamera.transform.forward, out hit, range))
            {
            Debug.Log(hit.transform.name);

           enemy Enemy = hit.transform.GetComponent<enemy>();
            if (Enemy != null)
            {
                Enemy.TakeDamage(damage);
            }

           if (hit.rigidbody != null)
            {
                hit.rigidbody.AddForce(-hit.normal * ImpactForce);
            }


            GameObject impactGO = Instantiate(impactEffect, hit.point, Quaternion.LookRotation(hit.normal));
            Destroy(impactGO, 2f);

            }
        }
    }
}
